TODO

more fun examples
more experiment analysis
pgm
do-notation
beta distribution, entropy
markov chains
k-s test
alias method
stochastic calculus, ito calculus

3 ways your A/B test can go wrong
- underlying distribution has no mean
- independence assumption

reversible computing
not a monad tutorial
dual numbers
fib in log n (F(n) * F(n-1) is a known identity?)
impossible functions: injection
computational algebra
generating functions


def evalMulti(x: Int, y: Int, coeffs: List[List[Int]]): Int = {
  def eval(cs: List[Int]): Int = {
    cs match {
      case Nil => 0
      case h :: t => x * eval(t) + h
    }
  }
  def eval2(cs: List[List[Int]]): Int = {
    cs match {
      case Nil => 0
      case h :: t => y * eval2(t) + eval(h)
    }
  }
  eval2(coeffs)
}

def unevalMulti(x: Int, y: Int, z: Int): List[List[Int]] = {
  def uneval(z: Int): List[Int] = {
    z match {
      case 0 => Nil
      case z => (z % x) :: uneval(z / x)
    }
  }
  def uneval2(z: Int): List[List[Int]] = {
    z match {
      case 0 => Nil
      case z => uneval(z % y) :: uneval2(z / y)
    }
  }
  uneval2(z)
}


val rushHour: Distribution[Boolean] = tf(0.2)
val badWeather: Distribution[Boolean] = tf(0.05)

def accident(badWeather: Boolean): Distribution[Boolean] = {
  badWeather match {
    case true => tf(0.3)
    case false => tf(0.1)
  }
}

def sirens(accident: Boolean): Distribution[Boolean] = {
  accident match {
    case true => tf(0.9)
    case false => tf(0.2)
  }
}

def trafficJam(rushHour: Boolean, badWeather: Boolean, accident: Boolean): Distribution[Boolean] = {
  (rushHour, badWeather, accident) match {
    case (true, true, _) => tf(0.95)
    case (true, _, true) => tf(0.95)
    case (_, true, true) => tf(0.95)
    case (true, false, false) => tf(0.5)
    case (false, true, false) => tf(0.3)
    case (false, false, true) => tf(0.6)
    case (false, false, false) => tf(0.1)
  }
}
case class Traffic(rushHour: Boolean, badWeather: Boolean, accident: Boolean, sirens: Boolean, trafficJam: Boolean)

val traffic = for {
  r <- rushHour
  w <- badWeather
  a <- accident(w)
  s <- sirens(a)
  t <- trafficJam(r, w, a)
} yield Traffic(r, w, a, s, t)



def partition(xs: List[A]): (List[A], List[A]) = {
  xs match {
    case Nil => (Nil, Nil)
    case h :: t => {
      (a, b) = partition(t)
      if (h < p) (h :: a, b) else (a, h :: b)
    }
  }
}

def merge(xs: List[A], ys: List[A]): List[A] = {
  (xs, ys) match {
    case ...
    case (x :: xt, y :: yt) => {
      val (a, at, b, bt) = sort2(x, xt, y, yt)
      val bs = b :: bt
      val abs = merge(at, bs)
      a :: abs
    }
  }
}

def extract(xs: List[A]): (List[A], List[A]) = {
  xs match {
    case Nil => (Nil, Nil)
    case h :: t => {
      val (s, r) = extract(t)
      s match {
        case Nil => (h :: Nil, r)
        case sh :: st => {
          if (h < sh) (h :: sh :: st, r) else (sh :: st, h :: r)
        }
      }
    }
  }
}

def extract(xs: List[A]): (List[A], List[A]) = {
  xs match {
    case Nil => (Nil, Nil)
    case a :: abs => {
      val (bs, at) = extract(abs)
      bs match {
        case ... =>
        case b :: bt => {
          (x, xt, y, yt) = sort2(a, at, b, bt)
          (x :: xt, y :: yt)
        }
      }
    }
  }
}



def strand(xs: List[A]): List[A] = {
  val (s, r) = extract(xs)
  merge(s, strand(r))
}

